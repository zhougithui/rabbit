<?xml version="1.0" encoding="UTF-8"?>
<!--suppress SpringFacetInspection -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.2.xsd
            http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util.xsd
            http://www.springframework.org/schema/rabbit
            http://www.springframework.org/schema/rabbit/spring-rabbit-2.0.xsd">
    <context:component-scan base-package="com.footprint.rabbit" />
    <context:annotation-config />
    <context:property-placeholder location="rabbit.properties"/>
    <!--<bean id="routerConnectionFactory"
          class="org.springframework.amqp.rabbit.connection.SimpleRoutingConnectionFactory">
        <property name="targetConnectionFactories">
            <map>
                <entry key="one" value-ref="connectionFactory"/>
                <entry key="two" value-ref="connectionFactory"/>
            </map>
        </property>
    </bean>-->

    <!--
        virtual-host: 虚拟主机，主要是隔离权限使用，默认 ‘/’
        channel-cache-size：可缓存通道数限制，默认25，如果超过25，则每次释放后会close掉
        connection-limit/connection-timeout：
            连接池限制，如果设置则，则如果connection-timeout
            时间内未获取到连接会抛出异常channelCheckoutTimeLimit
        cache-mode：缓存模式，默认为CHANNEL，也可以设置为CONNECTION
        pool：设置共享线程池，如果不设置则每个connection固定5个线程
            pool的大小，必须不小于连接数的大小
        host：
        port：
            与address冲突，只能二选一
        addresses：集群模式下使用 host1:5672,host2:5672
        thread-factory：线程工厂
    -->
    <!--<rabbit:connection-factory
            id="connectionFactory"
            addresses="${rabbit.address}"
            username="zh"
            password="zh"
            virtual-host="/"
            cache-mode="CONNECTION"
            channel-cache-size="25"
            connection-cache-size="10"
            connection-limit="10"
            connection-timeout="1000"
            executor="pool"
            thread-factory="tf"
            factory-timeout="10"
            connection-name-strategy="connNameStrategy"
            connection-factory="clientConnectionFactory"
            publisher-confirms="true"
            publisher-returns="true"
    />-->

    <bean id="defaultClientProperties" class="com.footprint.rabbit.product.DefaultClientProperties"/>
    <bean id="clientConnectionFactory"
          class="org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean">
        <property name="virtualHost" value="/"/>
        <property name="password" value="zh"/>
        <property name="username" value="zh"/>
        <property name="connectionTimeout" value="1000"/>
        <property name="automaticRecoveryEnabled" value="true"/>
        <property name="channelRpcTimeout" value="1000"/>
        <property name="clientProperties">
            <bean factory-bean="defaultClientProperties" factory-method="defaultClientProperties"/>
        </property>
        <property name="threadFactory" ref="tf"/>
        <property name="metricsCollector">
            <bean class="com.rabbitmq.client.impl.StandardMetricsCollector"/>
        </property>
        <property name="sharedExecutor" ref="pool"/>
        <property name="topologyRecoveryEnabled" value="true"/>
        <property name="useNio" value="true"/>
        <property name="socketConfigurator">
            <bean class="com.rabbitmq.client.DefaultSocketConfigurator"/>
        </property>
    </bean>

    <!--
        非rabbit空间定义connectionFactory
        rabbit:connection-factory  本质上还是定义了一个CachingConnectionFactory
    -->
    <bean id="connectionFactory"
          class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
        <constructor-arg name="rabbitConnectionFactory" ref="clientConnectionFactory"/>
        <property name="addresses" value="${rabbit.address}"/>
        <!--
            cacheMode
                值为CONNECTION时候，不会自动创建exchange和queue
        -->
        <property name="cacheMode" value="CONNECTION"/>
        <!--
            cacheMode
                值为CHANNEL时候，connectionCacheSize不能够设置
        -->
        <!--<property name="connectionCacheSize" value="10"/>-->
        <property name="connectionLimit" value="10"/>
        <property name="connectionTimeout" value="1000"/>
        <property name="channelCacheSize" value="25"/>
        <property name="executor" ref="pool"/>
        <property name="connectionThreadFactory" ref="tf"/>
        <property name="connectionNameStrategy" ref="connNameStrategy"/>
        <property name="username" value="zh"/>
        <property name="password" value="zh"/>
        <property name="virtualHost" value="/"/>
        <property name="channelCheckoutTimeout" value="1000"/>
        <property name="publisherConfirms" value="true"/>
        <property name="publisherReturns" value="true"/>
        <property name="closeTimeout" value="1000"/>
        <property name="channelListeners">
            <list>
                <bean class="com.footprint.rabbit.listener.ChannelListenerOne"/>
            </list>
        </property>
        <property name="connectionListeners">
            <list>
                <bean class="com.footprint.rabbit.listener.ConnectionListenerOne"/>
            </list>
        </property>
        <property name="closeExceptionLogger">
            <bean class="com.footprint.rabbit.log.CloseExceptionLoggerOne"/>
        </property>
        <property name="recoveryListener">
            <bean class="com.footprint.rabbit.listener.RecoverListenerOne"/>
        </property>
    </bean>

    <bean id="connNameStrategy" class="com.footprint.rabbit.ConnectionNameStrategy">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="connName" value="RABBIT2-CONN-ZH"/>
    </bean>

    <bean id="tf" class="org.springframework.scheduling.concurrent.CustomizableThreadFactory">
        <constructor-arg value="rabbitmq2-" />
    </bean>

    <bean id="pool" class="java.util.concurrent.ThreadPoolExecutor">
        <constructor-arg name="corePoolSize" value="10"/>
        <constructor-arg name="maximumPoolSize" value="10"/>
        <constructor-arg name="keepAliveTime" value="10"/>
        <constructor-arg name="unit">
            <util:constant static-field="java.util.concurrent.TimeUnit.SECONDS"/>
        </constructor-arg>
        <constructor-arg name="workQueue">
            <bean class="java.util.concurrent.LinkedBlockingQueue"/>
        </constructor-arg>
        <constructor-arg name="handler">
            <bean class="java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy"/>
        </constructor-arg>
    </bean>

    <bean id="jackson2JsonMessageConverter"
          class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter"/>

    <bean id="confirmCallBack" class="com.footprint.rabbit.product.DefaultConfirmCallBack" />
    <bean id="returnCallBack" class="com.footprint.rabbit.product.DefaultReturnCallBack" />
    <!--
        mandatory
        mandatory-expression
            二选一，只能配置一个

        user-id-expression
            如果设置了则会进行用户的校验，template只能给指定的用户发送消息，值必须和connectionFactory中username一致
                reply-code=406, reply-text=PRECONDITION_FAILED -
                user_id property set to 'zmy' but authenticated user was 'zh', class-id=60, method-id=40
    -->
    <rabbit:template
            id="amqpTemplate"
            connection-factory="connectionFactory"
            exchange="myExchange"
            routing-key="foo.bar"
            mandatory="true"
            confirm-callback="confirmCallBack"
            return-callback="returnCallBack"
            encoding="UTF-8"
            message-converter="jackson2JsonMessageConverter"
            user-id-expression="'zh'"
    />

    <!--
        使得admin和我们发送消息时候得template是同一个template，
        否则rabbit admin会自己new一个新的template
    -->
    <bean id="rabbitAdmin" class="org.springframework.amqp.rabbit.core.RabbitAdmin">
        <constructor-arg name="rabbitTemplate" ref="amqpTemplate"/>
    </bean>

    <rabbit:queue name="myQueue"/>
    <rabbit:topic-exchange name="myExchange">
        <rabbit:bindings>
            <!--
                当使用template发送消息时候，如果template设置routing-key与exchange绑定的queue的pattern不匹配的话
                returnCallBack会收到通知
                    replyCode 312
                    replyText NO_ROUTE
                    exchange myExchange
                    routingKey foo.bar
            -->
            <rabbit:binding queue="myQueue" pattern="abc" />

            <!--
                一个queue可以有多个匹配模式，也就是可以订阅多个主题
                如果没有一个模式匹配上，发送出去的消息就会被退回
                    CachingConnectionFactory一下参数为true的情况下
                    <property name="publisherConfirms" value="true"/>
                    <property name="publisherReturns" value="true"/>
            -->
            <rabbit:binding queue="myQueue" pattern="foo.*" />
        </rabbit:bindings>
    </rabbit:topic-exchange>

</beans>